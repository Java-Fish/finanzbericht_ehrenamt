name: 🏗️ Build Apps for All Platforms

on:
  push:
    branches: [ main, master ]
    tags: 
      - 'v*'
      - 'release_*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manueller Trigger

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 🖥️ Setup Virtual Display for GUI Tests
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔧 Setup Test Environment
      run: |
        export QT_QPA_PLATFORM=offscreen
        export QT_LOGGING_RULES="qt.qpa.xcb.warning=false"
        export DISPLAY=:99
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "QT_LOGGING_RULES=qt.qpa.xcb.warning=false" >> $GITHUB_ENV
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
    - name: 🧪 Run Tests
      run: |
        export DISPLAY=:99
        export QT_QPA_PLATFORM=offscreen
        python test/ci_test_runner.py

  build:
    name: 🏗️ Build Apps
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            executable_name: "Finanzauswertung_Ehrenamt.exe"
            icon_ext: "ico"
            
          - os: macos-latest  
            platform: macos
            executable_name: "Finanzauswertung_Ehrenamt.app"
            icon_ext: "icns"
            
          - os: ubuntu-latest
            platform: linux
            executable_name: "Finanzauswertung_Ehrenamt"
            icon_ext: "png"

    runs-on: ${{ matrix.os }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: 🎨 Install Icon Tools (macOS)
      if: matrix.platform == 'macos'
      run: |
        pip install icnsutil

    - name: 🎨 Install Icon Tools (Windows/Linux) 
      if: matrix.platform != 'macos'
      run: |
        pip install Pillow

    - name: 🏗️ Build Application
      run: |
        python ci_build.py

    - name: 📝 Create Release Info
      shell: bash
      run: |
        # Extrahiere Version aus Tag (release_1.0.0 -> 1.0.0 oder v1.0.0 -> 1.0.0)
        if [[ "${{ github.ref_name }}" =~ ^release_(.+)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
        elif [[ "${{ github.ref_name }}" =~ ^v(.+)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
        else
          VERSION="1.0.0"
        fi
        
        echo "# 📊 Finanzauswertung Ehrenamt v${VERSION}" > release_info.md
        echo "" >> release_info.md
        echo "**🚀 Release:** ${VERSION}" >> release_info.md
        echo "**📅 Build-Datum:** $(date '+%d.%m.%Y %H:%M:%S')" >> release_info.md  
        echo "**🖥️ Plattform:** ${{ matrix.platform }}" >> release_info.md
        echo "**🐍 Python:** $(python --version)" >> release_info.md
        echo "" >> release_info.md
        echo "## ✨ Features" >> release_info.md
        echo "- 📄 BWA-PDF-Generierung mit automatischer Formatierung" >> release_info.md
        echo "- 📊 CSV/Excel/ODS Import mit intelligenter Spalten-Erkennung" >> release_info.md
        echo "- 📈 Quartalsauswertungen und Jahresberichte" >> release_info.md
        echo "- 🏷️ Sachkonto-Mapping und Kategorisierung" >> release_info.md
        echo "- 💰 Automatische Bilanz-Erstellung" >> release_info.md
        echo "- 📋 Export in verschiedene Formate" >> release_info.md
        echo "" >> release_info.md
        echo "## 📦 Downloads" >> release_info.md
        echo "Wählen Sie die passende Version für Ihr Betriebssystem:" >> release_info.md
        echo "- **Windows:** \`Finanzauswertung_Ehrenamt.exe\`" >> release_info.md
        echo "- **macOS:** \`Finanzauswertung_Ehrenamt.app\`" >> release_info.md
        echo "- **Linux:** \`Finanzauswertung_Ehrenamt\`" >> release_info.md
        
        # Erstelle eine separate Version-Datei für Release
        echo "${VERSION}" > version.txt

    - name: 📦 Prepare Artifacts
      shell: bash
      run: |
        mkdir -p artifacts
        
        # Bestimme die zu kopierenden Dateien basierend auf der Plattform
        if [ "${{ matrix.platform }}" = "windows" ]; then
          # Windows: Suche nach .exe und .bat Dateien
          if [ -f "build/${{ matrix.executable_name }}" ]; then
            cp "build/${{ matrix.executable_name }}" artifacts/
            echo "✅ Windows .exe kopiert"
          elif [ -d "build/${{ matrix.executable_name }}" ]; then
            # PyInstaller onedir build
            cp -r "build/${{ matrix.executable_name }}" artifacts/
            echo "✅ Windows Build-Ordner kopiert"
          elif [ -f "build/Finanzauswertung_Ehrenamt.bat" ]; then
            cp "build/Finanzauswertung_Ehrenamt.bat" artifacts/
            cp "build/Finanzauswertung_Ehrenamt.py" artifacts/ 2>/dev/null || true
            cp -r build/src artifacts/ 2>/dev/null || true
            cp -r build/resources artifacts/ 2>/dev/null || true
            cp build/requirements.txt artifacts/ 2>/dev/null || true
            cp build/main.py artifacts/ 2>/dev/null || true
            echo "✅ Windows Fallback-Build kopiert"
          fi
          
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          # macOS: Suche nach .app Bundle
          if [ -d "build/${{ matrix.executable_name }}" ]; then
            cp -r "build/${{ matrix.executable_name }}" artifacts/
            echo "✅ macOS .app Bundle kopiert"
          elif [ -d "build/Finanzauswertung_Ehrenamt" ]; then
            # PyInstaller onedir build
            mv "build/Finanzauswertung_Ehrenamt" "build/Finanzauswertung_Ehrenamt.app"
            cp -r "build/Finanzauswertung_Ehrenamt.app" artifacts/
            echo "✅ macOS Build zu .app umbenannt und kopiert"
          fi
          
        else
          # Linux: Suche nach Executable oder Ordner
          if [ -f "build/${{ matrix.executable_name }}" ]; then
            cp "build/${{ matrix.executable_name }}" artifacts/
            chmod +x "artifacts/${{ matrix.executable_name }}"
            echo "✅ Linux Executable kopiert"
          elif [ -d "build/${{ matrix.executable_name }}" ]; then
            # PyInstaller onedir build
            cp -r "build/${{ matrix.executable_name }}" artifacts/
            echo "✅ Linux Build-Ordner kopiert"
          elif [ -f "build/Finanzauswertung_Ehrenamt.py" ]; then
            # Fallback build
            cp "build/Finanzauswertung_Ehrenamt.py" "artifacts/Finanzauswertung_Ehrenamt"
            chmod +x "artifacts/Finanzauswertung_Ehrenamt"
            cp -r build/src artifacts/ 2>/dev/null || true
            cp -r build/resources artifacts/ 2>/dev/null || true
            cp build/requirements.txt artifacts/ 2>/dev/null || true
            cp build/main.py artifacts/ 2>/dev/null || true
            echo "✅ Linux Fallback-Build kopiert"
          fi
        fi
        
        # Kopiere Release-Info falls vorhanden
        cp release_info.md artifacts/ 2>/dev/null || true
        
        # Zeige was wirklich gebaut wurde
        echo "🔍 Finale Artefakte:"
        find artifacts -type f -name "*" | head -20
        
        # Zeige Build-Directory Inhalt zur Diagnose
        echo "🔍 Build-Directory Inhalt:"
        find build -name "*" -type f | head -20 || echo "Build-Directory leer"

    - name: ⬆️ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: finanzauswertung-${{ matrix.platform }}
        path: artifacts/
        retention-days: 30

    - name: 🏷️ Create Release (Tags only)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*
        name: "🚀 Finanzauswertung Ehrenamt ${{ github.ref_name }}"
        body: |
          # 📊 Finanzauswertung Ehrenamt ${{ github.ref_name }}
          
          **🎉 Neue Version verfügbar!**
          
          ## 📦 Downloads
          Wählen Sie die passende Version für Ihr Betriebssystem:
          
          ### Windows 🪟
          - **Finanzauswertung_Ehrenamt.exe** - Direkt ausführbare Windows-Anwendung
          
          ### macOS 🍎  
          - **Finanzauswertung_Ehrenamt.app** - macOS-Anwendungspaket
          
          ### Linux 🐧
          - **Finanzauswertung_Ehrenamt** - Linux-Executable
          
          ## ✨ Features dieser Version
          - 📄 **BWA-PDF-Generierung** mit automatischer Formatierung
          - 📊 **Multi-Format Import** (CSV, Excel, ODS) mit intelligenter Spalten-Erkennung  
          - 📈 **Quartalsauswertungen** und detaillierte Jahresberichte
          - 🏷️ **Sachkonto-Mapping** und automatische Kategorisierung
          - 💰 **Bilanz-Erstellung** mit Ein-/Ausgaben-Übersicht
          - 📋 **Flexible Exports** in verschiedene Formate
          - 🔧 **Cross-Platform** - Läuft auf Windows, macOS und Linux
          
          ## 🚀 Installation
          1. Laden Sie die passende Version für Ihr System herunter
          2. **Windows:** Doppelklick auf die .exe-Datei
          3. **macOS:** Doppelklick auf die .app-Datei (evtl. Sicherheitseinstellungen anpassen)
          4. **Linux:** Datei ausführbar machen: `chmod +x Finanzauswertung_Ehrenamt && ./Finanzauswertung_Ehrenamt`
          
          ---
          **🔖 Tag:** ${{ github.ref_name }}  
          **💻 CI/CD:** Automatisch erstellt mit GitHub Actions
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Benachrichtigung bei erfolgreichem Build
  notify:
    name: 📢 Build Notification
    needs: [test, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: ✅ Success Notification
      if: needs.build.result == 'success'
      run: |
        echo "🎉 Alle Builds erfolgreich!"
        echo "📱 Apps für Windows, macOS und Linux erstellt"
        
    - name: ❌ Failure Notification  
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "💥 Build fehlgeschlagen!"
        echo "🔍 Prüfe die Logs für Details"
