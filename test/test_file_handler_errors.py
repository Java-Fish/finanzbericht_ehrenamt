#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test f√ºr FileHandler Fehlerf√§lle und Edge Cases
"""
import sys
import os
import tempfile
import pandas as pd
from pathlib import Path

# Lokale Imports
sys.path.append('src')
from utils.file_handler import FileHandler

def test_file_handler_errors():
    """Testet Fehlerbehandlung im FileHandler"""
    print("üîç Teste FileHandler Fehlerf√§lle...")
    
    handler = FileHandler()
    
    # Test 1: Nicht existierende Datei
    print("  üìã Test 1: Nicht existierende Datei")
    try:
        handler.process_file("/nicht/existierend.csv")
        print("  ‚ùå Fehler: Sollte FileNotFoundError werfen")
        return False
    except FileNotFoundError:
        print("  ‚úÖ FileNotFoundError korrekt geworfen")
    except Exception as e:
        print(f"  ‚ùå Unerwarteter Fehler: {e}")
        return False
    
    # Test 2: Nicht unterst√ºtztes Dateiformat
    print("  üìã Test 2: Nicht unterst√ºtztes Dateiformat")
    with tempfile.NamedTemporaryFile(suffix='.txt', delete=False) as temp_file:
        temp_file.write(b"test content")
        temp_path = temp_file.name
    
    try:
        handler.process_file(temp_path)
        print("  ‚ùå Fehler: Sollte ValueError werfen")
        return False
    except ValueError as e:
        if "Nicht unterst√ºtztes Dateiformat" in str(e):
            print("  ‚úÖ ValueError f√ºr unsupported format korrekt geworfen")
        else:
            print(f"  ‚ùå Unerwartete ValueError Nachricht: {e}")
            return False
    except Exception as e:
        print(f"  ‚ùå Unerwarteter Fehler: {e}")
        return False
    finally:
        os.unlink(temp_path)
    
    # Test 3: Leere CSV-Datei
    print("  üìã Test 3: Leere CSV-Datei")
    with tempfile.NamedTemporaryFile(suffix='.csv', mode='w', delete=False) as temp_file:
        temp_file.write("")  # Leere Datei
        temp_path = temp_file.name
    
    try:
        result = handler.process_file(temp_path)
        # Leere CSV kann fehlerhafte sein oder ein leeres DataFrame zur√ºckgeben
        print("  ‚úÖ Leere CSV ohne Fehler verarbeitet")
    except Exception as e:
        # Das ist auch ein erwartetes Verhalten
        print(f"  ‚úÖ Leere CSV wirft erwarteten Fehler: {type(e).__name__}")
    finally:
        os.unlink(temp_path)
    
    # Test 4: CSV mit nur Header
    print("  üìã Test 4: CSV mit nur Header")
    with tempfile.NamedTemporaryFile(suffix='.csv', mode='w', delete=False) as temp_file:
        temp_file.write("Spalte1;Spalte2;Spalte3\n")  # Nur Header
        temp_path = temp_file.name
    
    try:
        result = handler.process_file(temp_path)
        if isinstance(result, pd.DataFrame) and len(result) == 0 and len(result.columns) == 3:
            print("  ‚úÖ Header-only CSV korrekt verarbeitet")
        else:
            print(f"  ‚ùå Unerwartetes Ergebnis f√ºr Header-only CSV: {len(result)} Zeilen, {len(result.columns)} Spalten")
            return False
    except Exception as e:
        print(f"  ‚ùå Fehler bei Header-only CSV: {e}")
        return False
    finally:
        os.unlink(temp_path)
    
    # Test 5: CSV mit inkonsistenten Trennzeichen
    print("  üìã Test 5: CSV mit verschiedenen Trennzeichen")
    with tempfile.NamedTemporaryFile(suffix='.csv', mode='w', delete=False) as temp_file:
        temp_file.write("Spalte1,Spalte2,Spalte3\n")
        temp_file.write("Wert1,Wert2,Wert3\n")
        temp_path = temp_file.name
    
    try:
        result = handler.process_file(temp_path)
        if isinstance(result, pd.DataFrame) and len(result) > 0:
            print("  ‚úÖ Komma-separierte CSV korrekt verarbeitet")
        else:
            print(f"  ‚ùå Fehler bei Komma-CSV: {len(result)} Zeilen")
            return False
    except Exception as e:
        print(f"  ‚ùå Fehler bei Komma-CSV: {e}")
        return False
    finally:
        os.unlink(temp_path)
    
    # Test 6: Encoding-Probleme
    print("  üìã Test 6: Encoding mit Umlauten")
    with tempfile.NamedTemporaryFile(suffix='.csv', mode='w', encoding='utf-8', delete=False) as temp_file:
        temp_file.write("Spalte1;Spalte2;Spalte3\n")
        temp_file.write("M√ºller;Gr√∂√üe;W√§scherei\n")
        temp_path = temp_file.name
    
    try:
        result = handler.process_file(temp_path)
        if isinstance(result, pd.DataFrame) and len(result) > 0:
            # Pr√ºfe ob Umlaute korrekt gelesen wurden
            first_value = str(result.iloc[0, 0])
            if "M√ºller" in first_value:
                print("  ‚úÖ UTF-8 Encoding korrekt verarbeitet")
            else:
                print(f"  ‚ö†Ô∏è Encoding m√∂glicherweise nicht korrekt: '{first_value}'")
        else:
            print(f"  ‚ùå Fehler bei UTF-8 CSV: {len(result)} Zeilen")
            return False
    except Exception as e:
        print(f"  ‚ùå Fehler bei UTF-8 CSV: {e}")
        return False
    finally:
        os.unlink(temp_path)
    
    print("‚úÖ FileHandler Fehlerbehandlung erfolgreich getestet")
    return True

def main():
    """Hauptfunktion"""
    return test_file_handler_errors()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
