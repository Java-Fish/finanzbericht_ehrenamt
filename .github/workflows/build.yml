name: üèóÔ∏è Build Apps for All Platforms

on:
  push:
    branches: [ main, master ]
    tags: 
      - 'v*'
      - 'release_*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manueller Trigger

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: üñ•Ô∏è Setup Virtual Display for GUI Tests
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üîß Setup Test Environment
      run: |
        export QT_QPA_PLATFORM=offscreen
        export QT_LOGGING_RULES="qt.qpa.xcb.warning=false"
        export DISPLAY=:99
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "QT_LOGGING_RULES=qt.qpa.xcb.warning=false" >> $GITHUB_ENV
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
    - name: üß™ Run Tests
      run: |
        export DISPLAY=:99
        export QT_QPA_PLATFORM=offscreen
        python test/ci_test_runner.py

  build:
    name: üèóÔ∏è Build Apps
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            executable_name: "Finanzauswertung_Ehrenamt.exe"
            icon_ext: "ico"
            
          - os: macos-latest  
            platform: macos
            executable_name: "Finanzauswertung_Ehrenamt.app"
            icon_ext: "icns"
            
          - os: ubuntu-latest
            platform: linux
            executable_name: "Finanzauswertung_Ehrenamt"
            icon_ext: "png"

    runs-on: ${{ matrix.os }}

    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: üé® Install Icon Tools (macOS)
      if: matrix.platform == 'macos'
      run: |
        pip install icnsutil

    - name: üé® Install Icon Tools (Windows/Linux) 
      if: matrix.platform != 'macos'
      run: |
        pip install Pillow

    - name: üèóÔ∏è Build Application
      shell: bash
      run: |
        echo "üîç Debug: Vor dem Build"
        ls -la
        python ci_build.py
        echo "üîç Debug: Nach dem Build"
        ls -la build/ || echo "Build-Directory nicht gefunden"
        find build/ -name "*" || echo "Build-Directory leer"

    - name: üìù Create Release Info
      shell: bash
      run: |
        # Extrahiere Version aus Tag (release_1.0.0 -> 1.0.0 oder v1.0.0 -> 1.0.0)
        if [[ "${{ github.ref_name }}" =~ ^release_(.+)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
        elif [[ "${{ github.ref_name }}" =~ ^v(.+)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
        else
          VERSION="1.0.0"
        fi
        
        echo "# üìä Finanzauswertung Ehrenamt v${VERSION}" > release_info.md
        echo "" >> release_info.md
        echo "**üöÄ Release:** ${VERSION}" >> release_info.md
        echo "**üìÖ Build-Datum:** $(date '+%d.%m.%Y %H:%M:%S')" >> release_info.md  
        echo "**üñ•Ô∏è Plattform:** ${{ matrix.platform }}" >> release_info.md
        echo "**üêç Python:** $(python --version)" >> release_info.md
        echo "" >> release_info.md
        echo "## ‚ú® Features" >> release_info.md
        echo "- üìÑ BWA-PDF-Generierung mit automatischer Formatierung" >> release_info.md
        echo "- üìä CSV/Excel/ODS Import mit intelligenter Spalten-Erkennung" >> release_info.md
        echo "- üìà Quartalsauswertungen und Jahresberichte" >> release_info.md
        echo "- üè∑Ô∏è Sachkonto-Mapping und Kategorisierung" >> release_info.md
        echo "- üí∞ Automatische Bilanz-Erstellung" >> release_info.md
        echo "- üìã Export in verschiedene Formate" >> release_info.md
        echo "" >> release_info.md
        echo "## üì¶ Downloads" >> release_info.md
        echo "W√§hlen Sie die passende Version f√ºr Ihr Betriebssystem:" >> release_info.md
        echo "- **Windows:** \`Finanzauswertung_Ehrenamt.exe\`" >> release_info.md
        echo "- **macOS:** \`Finanzauswertung_Ehrenamt.app\`" >> release_info.md
        echo "- **Linux:** \`Finanzauswertung_Ehrenamt\`" >> release_info.md
        
        # Erstelle eine separate Version-Datei f√ºr Release
        echo "${VERSION}" > version.txt

    - name: üì¶ Prepare Artifacts
      shell: bash
      run: |
        mkdir -p artifacts
        
        echo "üîç Debug: Build-Verzeichnis Inhalt:"
        find build/ -type f 2>/dev/null || echo "Build-Verzeichnis nicht gefunden"
        
        # Bestimme die zu kopierenden Dateien basierend auf der Plattform
        FOUND_ASSET=false
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          echo "ü™ü Windows Build - suche nach .exe..."
          
          # Suche nach Windows .exe (PyInstaller)
          if [ -f "build/Finanzauswertung_Ehrenamt.exe" ]; then
            cp "build/Finanzauswertung_Ehrenamt.exe" artifacts/
            echo "‚úÖ Windows .exe gefunden und kopiert"
            FOUND_ASSET=true
          elif [ -d "build/Finanzauswertung_Ehrenamt" ] && [ -f "build/Finanzauswertung_Ehrenamt/Finanzauswertung_Ehrenamt.exe" ]; then
            # PyInstaller onedir build
            cp "build/Finanzauswertung_Ehrenamt/Finanzauswertung_Ehrenamt.exe" "artifacts/Finanzauswertung_Ehrenamt.exe"
            echo "‚úÖ Windows .exe aus PyInstaller-Ordner kopiert"
            FOUND_ASSET=true
          elif [ -f "build/Finanzauswertung_Ehrenamt.bat" ]; then
            # Fallback build
            cp "build/Finanzauswertung_Ehrenamt.bat" artifacts/
            echo "‚úÖ Windows Fallback .bat kopiert"
            FOUND_ASSET=true
          fi
          
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          echo "üçé macOS Build - suche nach .app..."
          
          # Suche nach macOS .app Bundle
          if [ -d "build/Finanzauswertung_Ehrenamt.app" ]; then
            cp -r "build/Finanzauswertung_Ehrenamt.app" artifacts/
            echo "‚úÖ macOS .app Bundle gefunden und kopiert"
            FOUND_ASSET=true
          elif [ -d "build/Finanzauswertung_Ehrenamt" ] && [ -f "build/Finanzauswertung_Ehrenamt/Finanzauswertung_Ehrenamt" ]; then
            # PyInstaller onedir - erstelle .app Bundle
            mkdir -p "artifacts/Finanzauswertung_Ehrenamt.app/Contents/MacOS"
            cp -r "build/Finanzauswertung_Ehrenamt/"* "artifacts/Finanzauswertung_Ehrenamt.app/Contents/MacOS/"
            # Info.plist erstellen
            cat > "artifacts/Finanzauswertung_Ehrenamt.app/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>Finanzauswertung_Ehrenamt</string>
            <key>CFBundleIdentifier</key>
            <string>org.ehrenamt-tools.finanzauswertung</string>
            <key>CFBundleName</key>
            <string>Finanzauswertung_Ehrenamt</string>
        </dict>
        </plist>
        EOF
            echo "‚úÖ macOS .app Bundle aus PyInstaller-Ordner erstellt"
            FOUND_ASSET=true
          fi
          
        else
          echo "üêß Linux Build - suche nach Executable..."
          
          # Suche nach Linux Executable
          if [ -f "build/Finanzauswertung_Ehrenamt" ]; then
            cp "build/Finanzauswertung_Ehrenamt" artifacts/
            chmod +x "artifacts/Finanzauswertung_Ehrenamt"
            echo "‚úÖ Linux Executable gefunden und kopiert"
            FOUND_ASSET=true
          elif [ -d "build/Finanzauswertung_Ehrenamt" ] && [ -f "build/Finanzauswertung_Ehrenamt/Finanzauswertung_Ehrenamt" ]; then
            # PyInstaller onedir
            cp "build/Finanzauswertung_Ehrenamt/Finanzauswertung_Ehrenamt" "artifacts/Finanzauswertung_Ehrenamt"
            chmod +x "artifacts/Finanzauswertung_Ehrenamt"
            echo "‚úÖ Linux Executable aus PyInstaller-Ordner kopiert"
            FOUND_ASSET=true
          fi
        fi
        
        # Falls kein Asset gefunden wurde, verwende Fallback
        if [ "$FOUND_ASSET" = "false" ]; then
          echo "‚ùå Kein plattform-spezifisches Asset gefunden - BUILD FEHLGESCHLAGEN"
          
          # Erstelle eine Fehlermeldung-Datei
          echo "‚ùå Build fehlgeschlagen f√ºr ${{ matrix.platform }}" > "artifacts/BUILD_FAILED_${{ matrix.platform }}.txt"
          echo "Siehe GitHub Actions Logs f√ºr Details" >> "artifacts/BUILD_FAILED_${{ matrix.platform }}.txt"
          
          # Zeige Build-Directory f√ºr Debug
          echo "üîç Build-Directory Debug:" >> "artifacts/BUILD_FAILED_${{ matrix.platform }}.txt"
          find build/ 2>/dev/null | head -20 >> "artifacts/BUILD_FAILED_${{ matrix.platform }}.txt" || echo "Build-Directory nicht gefunden" >> "artifacts/BUILD_FAILED_${{ matrix.platform }}.txt"
        fi
        
        # Kopiere Release-Info
        cp release_info.md artifacts/ 2>/dev/null || true
        
        # Zeige finale Artefakte
        echo "üîç Finale Artefakte:"
        ls -la artifacts/

    - name: ‚¨ÜÔ∏è Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: finanzauswertung-${{ matrix.platform }}
        path: artifacts/
        retention-days: 30

    - name: üè∑Ô∏è Create Release (Tags only)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*
        name: "üöÄ Finanzauswertung Ehrenamt ${{ github.ref_name }}"
        body: |
          # üìä Finanzauswertung Ehrenamt ${{ github.ref_name }}
          
          **üéâ Neue Version verf√ºgbar!**
          
          ## üì¶ Downloads
          W√§hlen Sie die passende Version f√ºr Ihr Betriebssystem:
          
          ### Windows ü™ü
          - **Finanzauswertung_Ehrenamt.exe** - Direkt ausf√ºhrbare Windows-Anwendung
          
          ### macOS üçé  
          - **Finanzauswertung_Ehrenamt.app** - macOS-Anwendungspaket
          
          ### Linux üêß
          - **Finanzauswertung_Ehrenamt** - Linux-Executable
          
          ## ‚ú® Features dieser Version
          - üìÑ **BWA-PDF-Generierung** mit automatischer Formatierung
          - üìä **Multi-Format Import** (CSV, Excel, ODS) mit intelligenter Spalten-Erkennung  
          - üìà **Quartalsauswertungen** und detaillierte Jahresberichte
          - üè∑Ô∏è **Sachkonto-Mapping** und automatische Kategorisierung
          - üí∞ **Bilanz-Erstellung** mit Ein-/Ausgaben-√úbersicht
          - üìã **Flexible Exports** in verschiedene Formate
          - üîß **Cross-Platform** - L√§uft auf Windows, macOS und Linux
          
          ## üöÄ Installation
          1. Laden Sie die passende Version f√ºr Ihr System herunter
          2. **Windows:** Doppelklick auf die .exe-Datei
          3. **macOS:** Doppelklick auf die .app-Datei (evtl. Sicherheitseinstellungen anpassen)
          4. **Linux:** Datei ausf√ºhrbar machen: `chmod +x Finanzauswertung_Ehrenamt && ./Finanzauswertung_Ehrenamt`
          
          ---
          **üîñ Tag:** ${{ github.ref_name }}  
          **üíª CI/CD:** Automatisch erstellt mit GitHub Actions
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Benachrichtigung bei erfolgreichem Build
  notify:
    name: üì¢ Build Notification
    needs: [test, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: ‚úÖ Success Notification
      if: needs.build.result == 'success'
      run: |
        echo "üéâ Alle Builds erfolgreich!"
        echo "üì± Apps f√ºr Windows, macOS und Linux erstellt"
        
    - name: ‚ùå Failure Notification  
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "üí• Build fehlgeschlagen!"
        echo "üîç Pr√ºfe die Logs f√ºr Details"
